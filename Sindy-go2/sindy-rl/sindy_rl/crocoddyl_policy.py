
import signal


import example_robot_data
import numpy as np
import pinocchio

import crocoddyl
from crocoddyl.utils.quadruped import SimpleQuadrupedalGaitProblem

class AnymalController:
    def __init__(self):
        # 设置信号中断
        signal.signal(signal.SIGINT, signal.SIG_DFL)

        # 载入机器人模型
        anymal = example_robot_data.load("anymal")
        self.robot_model = anymal.model

        self.step = 0

        # 限制力矩
        self.robot_model.effortLimit *= 0.5

        # 设置行走问题
        lfFoot, rfFoot, lhFoot, rhFoot = "LF_FOOT", "RF_FOOT", "LH_FOOT", "RH_FOOT"
        self.gait = SimpleQuadrupedalGaitProblem(self.robot_model, lfFoot, rfFoot, lhFoot, rhFoot)

        # 初始状态
        q0 = self.robot_model.referenceConfigurations["standing"].copy()
        v0 = pinocchio.utils.zero(self.robot_model.nv)
        x0 = np.concatenate([q0, v0])

        # 设定步态参数
        self.walking_gait = {
            "stepLength": 0.25,
            "stepHeight": 0.25,
            "timeStep": 1e-2,
            "stepKnots": 25,
            "supportKnots": 2,
        }

        # 计算 DDP 解决方案
        self.solver = crocoddyl.SolverBoxDDP(
            self.gait.createWalkingProblem(
                x0,  
                self.walking_gait["stepLength"],
                self.walking_gait["stepHeight"],
                self.walking_gait["timeStep"],
                self.walking_gait["stepKnots"],
                self.walking_gait["supportKnots"],
            )
        )

        self.xs = [x0] * (self.solver.problem.T + 1)
        self.us = self.solver.problem.quasiStatic([x0] * self.solver.problem.T)
        self.solver.solve(self.xs, self.us, 2500, False, 0.1)

        # 将 self.us 转换为列表
        self.us_list = list(self.us)
        self.current_index = 0  # 初始化索引
    
  

    def collect_Policy(self, obs):
        """获取下一个控制动作"""
        if self.current_index < len(self.us_list):
            action = self.us_list[self.current_index]
            print("每个动作0", action)
            
            # 如果 action 是空数组，则使用上一个 action
            if isinstance(action, np.ndnp.array) and action.size == 0:
                action = self.us_list[self.current_index - 1]
            
            print("每个动作", action)
            self.current_index += 1
            self.step += 1  
            print("step:", self.step)
            print("self.current_index", self.current_index)
            return self.us_list
        else:
            print("所有步态动作已执行完毕")
            return None
        
class data:
    def __init__(self):
        self.index = 0  # 初始化索引
    WALKING_OUTPUT = [np.array([ -3.59576983,   2.50372976,  12.46178954,  -3.62280556,
        -2.51572762, -12.53947845,   3.63780778,   2.50643563,
        12.55105551,   3.66484352,  -2.51843348, -12.62874442]), np.array([ -3.59576983,   2.50372976,  12.46178954,  -3.62280556,
        -2.51572762, -12.53947845,   3.63780778,   2.50643563,
        12.55105551,   3.66484352,  -2.51843348, -12.62874442]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([  1.53564764,   2.27461521,  -0.58411344,  -8.6297982 ,
        -2.7447037 , -25.58081347,   8.76799187,   2.95861449,
        25.72895005,  -1.58976541,  -2.51101183,   0.29037585]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -8.57047596,   2.72852888,  25.42987567,   1.4789725 ,
        -2.29078709,   0.43327283,  -1.58976541,   2.51101183,
        -0.29037584,   8.76534477,  -2.97429114, -25.73813392]), np.array([ -3.59576983,   2.50372976,  12.46178954,  -3.62280556,
        -2.51572762, -12.53947845,   3.63780778,   2.50643563,
        12.55105551,   3.66484352,  -2.51843348, -12.62874442]), np.array([ -3.59576983,   2.50372976,  12.46178954,  -3.62280556,
        -2.51572762, -12.53947845,   3.63780778,   2.50643563,
        12.55105551,   3.66484352,  -2.51843348, -12.62874442]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([ -8.69038176,   2.95240389,  25.55017836,   1.5897654 ,
        -2.51101183,   0.29037585,  -1.45803513,   2.28039037,
        -0.40559941,   8.6427274 ,  -2.74434747, -25.58106875]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ]), np.array([  1.5897654 ,   2.51101183,  -0.29037584,  -8.68773467,
        -2.96808053, -25.55936223,   8.58340516,   2.72817265,
        25.43013096,  -1.40135999,  -2.29656224,   0.2547588 ])]

    def collect_Policy(self, obs):
        # 获取当前索引对应的子数组
        output = self.__class__.WALKING_OUTPUT[self.index]

        # 更新索引，循环到末尾时重置为 0
        self.index = (self.index + 1) % len(self.__class__.WALKING_OUTPUT)

        return output
